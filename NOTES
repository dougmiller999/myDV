NEEDED FEATURES LIST (this is always on top)

[ ] Refactor: funcs that affect plot from funcs that affect curves, unary from binary, etc.
[ ] integral
[ ] xmax?  maybe don't need if integral takes a range.
[ ] L2 norm
[ ] fit command: 'fit a 1 logy xmin xmax'
[ ] read .myvrc file for initialization settings
[-] read commands from a file: sort of; a here-doc, 'myv << EOF' works
[ ] allow 'cur 3, b.3, c.3', syntax
[03/31/2025] specify position and size of initial plot window
[03/28/2025] removed a lot of debug prints, added makecolor command, added 'lw' command
[03/27/2025] many upgrades; colon syntax for der, labelfilenames, 'debug' toggle
[03/14/2025] xmin command, also 'fill' command does shading
[02/10/2025] change font size for labels, title axes numbers
[02/10/2025] Made history persistent across sessions with .myvhistory file
[02/08/2025] newcurve: generates new curve from python syntax,
             e.g. 'nc x**2 + 3*x'
[02/08/2025] put legend ur, ul, lr, ll
[02/08/2025] hide/show legend
[02/08/2025] cur command takes menu output: 'cur menu foo*'
[02/08/2025] menu command takes wildcards (i.e., regexes)
[02/08/2025] make command line have editing and history functions
[02/07/2025] movefront command, to show the curve we want to see
[02/07/2025] take a range of numbers for args, e.g. 'cur 3:8'
[02/05/2025] take a range of curve identifiers for args, e.g. 'color c:i red'
[02/04/2025] 'span' command
[02/03/2025] derivative operator
[02/02/2025] ran and dom commands, with "ran de" and "dom de" too
[02/02/2025] hide/show chosen curves but keep them in plotlist
[02/02/2025] log operator
[02/02/2025] exp operator
[02/02/2025] sin operator
[02/02/2025] cos operator
[02/02/2025] ylogscale
[02/02/2025] xlogscale
[02/01/2025] a - b operator
[02/01/2025] a/b operator
[02/01/2025] a*b operator
[01/31/2025] a + b operator works as 'add a b' command
[01/31/2025] adding utility commands like getCurveFromId, addCurveToPlot
[01/31/2025] mx, my commands work
[01/31/2025] color command works
[01/31/2025] line styles commands work
[01/31/2025] added a-zA-Z labeling for displayed curves
[03/11/2024] allow 'mcur 3', meaning 'cur a.3, b.3, c.3' syntax
[03/11/2024] read multiple files
[03/05/2024] made a Plot class that holds title, labels, annotations, plotList
[03/05/2024] title command works
[03/05/2024] xlabel command works
[03/05/2024] ylabel command works
[03/04/2024] plot screen should stay up all the time, no need for 'p' command

--SUN March 3, 2024

Starting git repo.  Already have the following functions working:
label, q, p (plot), menu, cur, ls, del.  

These don't all quite work right yet, though.  "Menu", for example, does not 
take wildcards, it just lists every curve.  And the 'plot' command is 
necessary to bring the window back each time.  

Added ylabel command tonight.  Added title but it isn't persistent.

--MON March  4, 2024

Wait, the ylabel is not persistent either!  Ok, clearly we need a Plot
class to hold all the stuff and settings we want for the plotted
image.

Experimenting with how to make the plot command non-blocking.
Trying 'plt.ion', for "interactive on".  Ok this works.

    plt.cla()
    plt.ion()
    plt.show()
    
    for c in plotList:
        plt.plot(c.x, c.y, 'o-', color=c.color)

    plt.legend([c.label for c in plotList])
    plt.grid(visible=True)
    plt.draw()

But it makes clear the ylabel and title and color choices are all
transient and the next plot they go away.  We gotta make the Plot
class to hold the state so we can reproduce it when we want.

--TUE March  5, 2024

Made the Plot class, installed it, tested existing functions. Works
great!  Now title, x/y labels are permanent, not disappearing with
each plot command.

Using a "here document" works pretty well for feeding command to myv
from a file.  Not perfect but it'll do for now.

Multiple files.  Hmmm.  Could do multiple File objects, which hold
curves.  Or, just all the curves together, but then how do we do
a.3, b.3, etc?  A fileIndex list that points to the first curve for
each file would do it.
fileIndexList = [ (0, 'file1'), (N, 'file2'), (N+M, 'file1') ]
then a.4, b.4, c.5 becomes curves[4], curves[N+4], curves[N+M+5],
which is pretty easy.  Want to modify ls command to give file info,
too, so we can keep them straight.

Trying to add fileIndex variable but it is broken!

--MON March 11, 2024

Added multi-file support and 'mcur', or 'multiple curve' command which
plots every curve with the same number from all files that have been
read in.

--TUE March 19, 2024

Fixed a bug where reading lots of curves in would cause the color 
index to overflow the length of the predetermined color array.

--FRI January 31, 2025

Added the 'a-zA-Z' labeling for the curves shown on the plot.  It's 
not perfect, it doesn't re-use labels yet, just plows through the
list of identifiers, but the extension to full usability will be easy.

Added mx, my, for modifying data scales.  Added line styles.  Added
'color' command so we can change colors willy nilly.  Added erase
plot command.  This starting to feel like the real thing.

--SAT February  1, 2025

Added big four arithmetic operators, +,-,*,/, as 'add', 'sub', 'mul',
and 'div' commands.

--SUN February  2, 2025

Adding functions of curves; 'log', 'log10', 'exp', 'sin',
'cos'. Honestly, not going to bother adding more until it comes up.
It's super easy to add a fuction, especially if it's already in numpy,
and seriously, I am not going to do anything so weird it isn't already
in numpy.  Probably.

The more I screw with this the more the memories come back and I add
another feature to the list.  Added 'hide/show'.  Should add 'ran' and
'dom', but I'll have to learn about matplotlib axes some more, again.
:-) Ok, I added 'ran' and 'dom', just had to have them!  Works pretty
well, too.

--MON February 3, 2025

Adding derivative function.  Not seeing a great function available in
numpy for returning a curve that is the continuous integral of another
curve.  Definitely don't want to call numpy.trapz(y,x) for every x
point in the original curve, although maybe that would be so fast it
would be ok, will have to test.  Super ugly though.  May have to write
custom?? Yikes!

--TUE February  4, 2025

Adding 'span' command.  It makes a curve of y=x over a user specified
range.  Useful for getting started when doing calculations.  Probably
pretty useless after 'new curve' is implemented, but an easy one to
knock off.

Adding the 'a:c' -> 'a b c' syntax that expands colon expressions.

--WED February  5, 2025

Colon expression expansion still has a few bugs though most functions are working fine.
This example fails though:

hide b:c (works)
show b:c (only c is displayed)

Digging.  Ok, fixed, but *super* *obviously* I need to get organized
here, with functions that affect plots separated from functions that
do things to curves (and take multiple args) and funcs that return a
curve.  Making a TODO item.

--THU February  6, 2025

Taking a minute to look at reorganizing the source.

--FRI February  7, 2025

Using the tool in anger on data from FLASH.  Also, adding colon
expansion syntax for the 'curve' command, which is tricky because it
takes numbers not letter.

I can see we need the 'movefront' command to see the curve we want to
see!  Added that.

--SAT February  8, 2025

Debugged why 'show' was not taking colon expansions correctly.  We
were assuming that curve.plot==True as a good filter for appling
commands, but actually (think about it) do_show() won't work if you
filter for curve.plot == True, so we are just taking that off for
everybody.  If you apply 'color' to a bunch of hidden curves, their
color changes, sorry.  Also, adding more user input checking so the
tool crashes less often.

OMG, it is as easy as just importing the 'readine' module and suddenly
the 'input' command understands emacs editing of the command line,
keeping a command history, and letting you search the history for a
command.  This is great!  Another major life improvement knocked off
the TODO list!

And even better, it was trivial to add wildcards to the 'menu'
command!  Well, we have to use python regex syntax, but that's ok.
I'm pretty used to it by now anyway.

Tried adding the 'cur(menu *)' functionality.  The easiest thing was
to just examine the second argument to 'cur', and if it is 'menu' then
call do_menu(line[2:]), capture the output as a string 'line' (which
now looks like an input line to the 'cur' command), and feed it to
do_cur(line).  And it works, first time, woo!

Added hide/show/position the legend, or "key".

Could not resist adding the 'newcurve' command.  Modified, perhaps up
graded from what PyDV had, in that simply 'x' is the independent
variable, and users can specify a particular curve to be the supplier
of the x-values if they want. Default is just to use the first curve
in the plotList.  Not perfect but hey, this is for meeeee.

--MON February 10, 2025

As long as we're doing it, may as well add between-sessions history
recording, which is trivial with the readline module.  Ok, added
history that is preserved across sessions.

Added changing the fontsize.

--TUE February 11, 2025

Do you wonder where I'm getting the time to do this?  It's mostly the little
snippets between when I submit a job and the job starts running.

Looking at integrate operation.  Scipy has integrate.cumtrapz, but it
weirdly returns one fewer values that I think it should.  And it gets
"integrate a constant" wrong?  I think I'm just not centering their
answer correctly, but it's weird.

--THU March 27, 2025

Heavily using at PF for analysis.  Made 'der' command accept colon
syntax.  Added 'labelfilenames' command, which appends the file name
to the legend label.

--FRI March 28, 2025

Added 'makecolor', a new idea, where 'makecolor a b' set the color
of 'a' according to the color of 'b'.

--MON March 31, 2025

Upgraded 'makecolor' to take two lists, mapping the colors of the first
from the colors of the second.  As in, "makecolor e:h a:d" will color
the e:h curves using the a:d colors.

Added ability to specify position and size of initial plot window,
finally.  Functioning depends on the back-end, though.